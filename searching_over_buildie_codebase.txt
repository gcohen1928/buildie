(base) skrachur@skrachur-mac api % poetry run python /Users/skrachur/Desktop/buildie/api/app/agents/test_search_case.py
/Users/skrachur/Desktop/buildie/api/app/agents/__init__.py:8: LangChainDeprecationWarning: As of langchain-core 0.3.0, LangChain uses pydantic v2 internally. The langchain_core.pydantic_v1 module was a compatibility shim for pydantic v1, and should no longer be used. Please update the code to import from Pydantic directly.

For example, replace imports like: `from langchain_core.pydantic_v1 import BaseModel`
with: `from pydantic import BaseModel`
or the v1 compatibility namespace if you are working in a code base that has not been fully upgraded to pydantic 2 yet.       from pydantic.v1 import BaseModel

  from .tools import code_search, video_generation, post_creation
INFO     [telemetry] Anonymized telemetry enabled. See https://docs.browser-use.com/development/telemetry for more information.
Running code_search …

Matched project: gcohen1928/buildie (ID 9eab0d3f-422f-4ce0-a073-1ffd52c6b9a2)
Found project ID 9eab0d3f-422f-4ce0-a073-1ffd52c6b9a2 for repository: buildie
Optimized search query: 'We've rolled out a new sign-in flow to enhance security and user experience. Additionally, you can now import your existing projects directly from GitHub. When creating a new project, simply provide the GitHub repository link. The system will then index your codebase and load the commit history, making it easier to get started and providing valuable context from your project's past Implemented login, and users can create a new project that links to their github repo. we now index the repo, process its commits and show the commit history on the dashboard page web/src/app/commit-spark-demo/page.tsx page'
Parsed 496 embeddings that PostgREST returned as strings → lists[float]
Search retrieved 496 candidates → 5 top matches (≥0.4)
Returned 5 chunks:

--- Chunk 1  (similarity ~ 0.815) ---
File: web/src/app/dashboard/page.tsx  lines 1-15
"use client";

import { useEffect, useState, useCallback, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import ChatInput from '@/components/Dashboard/ChatInput';
import CommitHistoryTable, { Commit } from '@/components/Dashboard/CommitHistoryTable';
import PreviousContentTable from '@/components/Dashboard/PreviousContentTable'; // Import the new table
import 


--- Chunk 2  (similarity ~ 0.810) ---
File: web/src/app/dashboard/page.tsx  lines 13-27
import { Paperclip, ArrowRight, Globe, Settings2, SearchCode, PenTool, AlertTriangle, Sparkles, Zap, Bot, Wand2, CheckCircle2, Github, DownloadCloud, GitCommit, LayoutDashboard, Loader2, GitFork, ListChecks, FileText, X, PlayCircle } from "lucide-react"; // Changed PowerPlug to Zap and added X icon, Added PlayCircle
import React from 'react'; // Ensure React is imported for JSX types
import { moti


--- Chunk 3  (similarity ~ 0.808) ---
File: web/src/app/dashboard/page.tsx  lines 385-399
  projectName: string | undefined;
}

const indexingSteps = [
  { key: 'connect_github', message: "Connecting to your GitHub repository", icon: <Github className="h-10 w-10 text-purple-400" /> },
  { key: 'clone_repo', message: "Cloning repository to analyze", icon: <DownloadCloud className="h-10 w-10 text-purple-400" /> },
  { key: 'analyze_commits', message: "Analyzing commit history", icon: <Gi


--- Chunk 4  (similarity ~ 0.804) ---
File: web/src/app/dashboard/page.tsx  lines 517-531
  const [project, setProject] = useState<ProjectData | null>(null);
  const [isLoadingProject, setIsLoadingProject] = useState(true);
  const [projectError, setProjectError] = useState<string | null>(null);

  const [commits, setCommits] = useState<Commit[]>([]);
  const [isLoadingCommits, setIsLoadingCommits] = useState(true);
  const [commitsError, setCommitsError] = useState<string | null>(null


--- Chunk 5  (similarity ~ 0.796) ---
File: web/src/components/projects/new-project-form.tsx  lines 49-63
  }).regex(/^https:\/\/github\.com\/[^\/]+\/[^\/]+$/, {
    message: "Must be a valid GitHub repository URL (e.g., https://github.com/user/repo)."
  }),
  description: z.string().max(500, {
    message: "Description must not exceed 500 characters."
  }).optional(),
});

type ProjectFormValues = z.infer<typeof projectFormSchema>;

export function NewProjectForm() {
  const router = useRouter();
  c


(base) skrachur@skrachur-mac api % 