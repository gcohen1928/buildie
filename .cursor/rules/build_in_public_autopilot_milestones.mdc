---
description: 
globs: 
alwaysApply: false
---
# Build-in-Public Autopilot: Project Plan & Milestones

This document outlines the development plan and key milestones for the "Build-in-Public Autopilot" monorepo project. The goal is to create a system that automates aspects of the build-in-public process by leveraging GitHub webhooks, LLM agents, and various modern development tools.

## Key Technologies

*   **Backend:** FastAPI ([api/README.md](mdc:api/README.md))
*   **Frontend:** Next.js
*   **LLM Orchestration:** LangGraph
*   **Browser Automation/Recording:** Playwright (Optional/Stretch Goal)
*   **Database & Auth:** Supabase
*   **LLM Observability:** Arize Phoenix
*   **Containerization:** Docker
*   **Deployment:** Vercel (Frontend), Fly.io (Backend)

## Development Milestones

### Phase 1: Core Backend (FastAPI) - In Progress

*   **M1.1: Initial API Scaffolding (âœ… Done)**
    *   Basic FastAPI app structure created in `api/`.
    *   Placeholder routes for auth, webhooks, generation, and events.
    *   Initial module structure for agents, ingest, video, and publish.
    *   Setup `pyproject.toml` for dependency management.
    *   Basic `Dockerfile` for the API.
    *   Refer to [api/README.md](mdc:api/README.md) for API setup and details.

*   **M1.2: GitHub Webhook Ingestion**
    *   Implement logic in `api/app/routes/webhook.py` to securely receive, validate, and process GitHub webhooks (e.g., push events, commit details).
    *   Store relevant webhook data.

*   **M1.3: Diff Processing & Code Analysis**
    *   Develop `api/app/ingest/diff_splitter.py` to parse code diffs from commit data.
    *   Extract meaningful changes and context for the LLM agent.

*   **M1.4: Supabase Integration - Core**
    *   Set up Supabase project (DB, Auth).
    *   Define initial database schemas using SQLModel/Pydantic in `api/app/models/` for users, projects, ingested data (commits, diffs), and generated content.
    *   Implement core service logic in `api/app/services/` for interacting with Supabase.
    *   Integrate Supabase Auth for API endpoint protection in `api/app/routes/auth.py` and `api/app/dependencies/`.

*   **M1.5: LangGraph Agent - Initial Version**
    *   Design and implement the initial LangGraph agent in `api/app/agents/build_graph.py` and `api/app/agents/graph_runner.py`.
    *   Focus: Take processed diffs/commit information and generate initial summaries, insights, or blog post drafts.
    *   Integrate with an LLM provider (e.g., OpenAI).

*   **M1.6: Arize Phoenix Logging**
    *   Implement `api/app/publish/arize_logger.py` to log LLM prompts, responses, and agent traces to Arize Phoenix for observability.

*   **M1.7: API Endpoints for Generation & Control**
    *   Develop `api/app/routes/generate.py` to allow triggering the LangGraph agent manually or based on events.
    *   Define schemas in `api/app/schemas/` for request/response validation.

### Phase 2: Frontend (Next.js) & User Interface

*   **M2.1: Next.js Project Setup (`web/`)**
    *   Initialize a new Next.js application within the `web/` directory.
    *   Establish basic project structure: pages, components, services, styles.
    *   Integrate Supabase client library for authentication and data fetching.

*   **M2.2: User Authentication UI**
    *   Implement frontend components and pages for user registration, login, and logout using Supabase Auth.
    *   Manage user sessions.

*   **M2.3: Dashboard & Content Display**
    *   Create UI views to display ingested GitHub data (e.g., repository activity, commit history).
    *   Develop components to present content generated by the LangGraph agent (summaries, posts).
    *   Allow users to view and manage their connected projects.

*   **M2.4: API Interaction Layer**
    *   Implement services/hooks in Next.js to communicate with the FastAPI backend for fetching data, triggering agent tasks, and managing user settings.

### Phase 3: Advanced Features & Integrations

*   **M3.1: Playwright Video Recording (Optional/Stretch Goal)**
    *   Set up a `playwright_runner/` service or module.
    *   Integrate logic in `api/app/video/recorder.py` to (optionally) trigger Playwright to record screens/browser sessions during specific development activities or for creating demo videos.
    *   Plan for storage and linking of these recordings.

*   **M3.2: Real-time Updates with WebSockets**
    *   Fully implement WebSocket functionality in `api/app/routes/events.py`.
    *   Connect Next.js frontend to receive real-time updates (e.g., task progress, new content generated).

*   **M3.3: Advanced LangGraph Agent Capabilities**
    *   Refine LangGraph agent: improve prompts, add more complex reasoning, enable multi-step content generation (e.g., tweet threads, detailed blog sections).
    *   Implement embedding generation and vector search (`api/app/ingest/embeddings.py`) for RAG if needed.
    *   Develop `api/app/ingest/manual_ingest_tool.py` for ad-hoc data input to the agent.

*   **M3.4: Content Publishing & Social Integration**
    *   Expand `api/app/publish/social_mocks.py` into actual integrations with platforms like Twitter, LinkedIn, or Dev.to.
    *   Allow users to review and approve content before publishing.

### Phase 4: Infrastructure, Deployment & DX

*   **M4.1: Dockerization & Orchestration**
    *   Finalize `api/Dockerfile` for production.
    *   Create a `web/Dockerfile` for the Next.js application.
    *   Develop a `docker-compose.yml` at the monorepo root for easy local multi-service development.
    *   Update/Create `Makefile` at the root for common development tasks.

*   **M4.2: Supabase Migrations & Database Management**
    *   Establish a robust workflow for Supabase database schema migrations.
    *   Ensure data integrity and version control for the database schema.

*   **M4.3: Deployment Strategy**
    *   Deploy FastAPI backend to Fly.io (or similar PaaS).
    *   Deploy Next.js frontend to Vercel.
    *   Set up CI/CD pipelines (e.g., GitHub Actions) for automated testing and deployment.

*   **M4.4: Environment Variable Management**
    *   Maintain a clear `env.example.txt` (or similar, e.g., `env.example` if not for tool limitations) in the root directory.
    *   Ensure secure and consistent handling of environment variables across local, staging, and production environments.

### Phase 5: Testing, Refinement & Iteration

*   **M5.1: Comprehensive Testing**
    *   Write unit tests (e.g., with Pytest for FastAPI, Jest/React Testing Library for Next.js).
    *   Implement integration tests for API endpoints and service interactions.
    *   Develop end-to-end tests (e.g., using Playwright or Cypress) covering key user flows.

*   **M5.2: Monitoring & Observability**
    *   Ensure Arize Phoenix is effectively capturing all necessary LLM interaction data.
    *   Set up basic application monitoring for both backend and frontend services.

*   **M5.3: User Feedback & Iterative Improvement**
    *   Actively seek user feedback if the project is used by others.
    *   Iterate on features, usability, and agent performance based on real-world use and feedback.

This project plan provides a structured approach to building the "Build-in-Public Autopilot." Milestones and priorities may be adjusted as the project evolves.
